name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-java:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, order-service]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Cache Maven
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    - name: Test
      run: mvn test
      working-directory: services/${{ matrix.service }}
    - name: Build
      run: mvn package -DskipTests
      working-directory: services/${{ matrix.service }}
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }} .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
      working-directory: services/${{ matrix.service }}

  build-python:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -r requirements.txt
      working-directory: services/analytics-consumer
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics-consumer:${{ github.sha }} .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/analytics-consumer:${{ github.sha }}
      working-directory: services/analytics-consumer

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-java, build-python]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
    - name: Set up kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
    - name: Deploy to AKS
      run: |
        # Update image tags in manifests
        sed -i "s|ghcr.io/your-repo/user-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/user-service:${{ github.sha }}|g" infra/k8s/user-service.yml
        
        # Apply manifests
        kubectl apply -f infra/k8s/namespace.yml
        kubectl apply -f infra/k8s/user-service.yml
        
        # Wait for rollout
        kubectl rollout status deployment/user-service -n demo --timeout=300s